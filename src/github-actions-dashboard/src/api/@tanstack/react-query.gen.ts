// This file is auto-generated by @hey-api/openapi-ts

import { type Options, getRepositories, getRepositoriesGrouped, postWorkflows, postWorkflowsRuns } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { GetRepositoriesData, GetRepositoriesGroupedData, PostWorkflowsData, PostWorkflowsResponse, PostWorkflowsRunsData, PostWorkflowsRunsResponse } from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: options?.baseURL || (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getRepositoriesQueryKey = (options?: Options<GetRepositoriesData>) => createQueryKey('getRepositories', options);

export const getRepositoriesOptions = (options?: Options<GetRepositoriesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRepositories({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRepositoriesQueryKey(options)
    });
};

export const getRepositoriesGroupedQueryKey = (options?: Options<GetRepositoriesGroupedData>) => createQueryKey('getRepositoriesGrouped', options);

export const getRepositoriesGroupedOptions = (options?: Options<GetRepositoriesGroupedData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getRepositoriesGrouped({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getRepositoriesGroupedQueryKey(options)
    });
};

export const postWorkflowsQueryKey = (options: Options<PostWorkflowsData>) => createQueryKey('postWorkflows', options);

export const postWorkflowsOptions = (options: Options<PostWorkflowsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postWorkflows({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postWorkflowsQueryKey(options)
    });
};

export const postWorkflowsMutation = (options?: Partial<Options<PostWorkflowsData>>): UseMutationOptions<PostWorkflowsResponse, AxiosError<DefaultError>, Options<PostWorkflowsData>> => {
    const mutationOptions: UseMutationOptions<PostWorkflowsResponse, AxiosError<DefaultError>, Options<PostWorkflowsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postWorkflows({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postWorkflowsRunsQueryKey = (options: Options<PostWorkflowsRunsData>) => createQueryKey('postWorkflowsRuns', options);

export const postWorkflowsRunsOptions = (options: Options<PostWorkflowsRunsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postWorkflowsRuns({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postWorkflowsRunsQueryKey(options)
    });
};

export const postWorkflowsRunsMutation = (options?: Partial<Options<PostWorkflowsRunsData>>): UseMutationOptions<PostWorkflowsRunsResponse, AxiosError<DefaultError>, Options<PostWorkflowsRunsData>> => {
    const mutationOptions: UseMutationOptions<PostWorkflowsRunsResponse, AxiosError<DefaultError>, Options<PostWorkflowsRunsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postWorkflowsRuns({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};