// This file is auto-generated by @hey-api/openapi-ts

export type AccountModel = {
    login: string;
    avatarUrl: string;
    htmlUrl: string;
    type?: NullableOfAccountType;
    repositories?: Array<RepositoryModel>;
};

export type AdvancedSecurity = {
    status?: string | null;
} | null;

export type BranchFilterRequest = {
    branchFilters?: Array<string>;
};

export type DependabotSecurityUpdates = {
    status?: string | null;
} | null;

export type LicenseMetadata = {
    key?: string | null;
    nodeId?: string | null;
    name?: string | null;
    spdxId?: string | null;
    url?: string | null;
    featured?: boolean;
} | null;

export type NullableOfAccountType = number | null;

export type NullableOfRepositoryVisibility = number | null;

export type NullableOfStringEnumOfWorkflowRunConclusion = string | null;

export type Plan = {
    collaborators?: number;
    name?: string | null;
    privateRepos?: number;
    space?: number;
    billingEmail?: string | null;
    filledSeats?: number;
    seats?: number;
} | null;

export type RagStatus = 'None' | 'Red' | 'Amber' | 'Green';

export type Repository = {
    url?: string | null;
    htmlUrl?: string | null;
    cloneUrl?: string | null;
    gitUrl?: string | null;
    sshUrl?: string | null;
    svnUrl?: string | null;
    mirrorUrl?: string | null;
    archiveUrl?: string | null;
    id?: number;
    nodeId?: string | null;
    owner?: User;
    name?: string | null;
    fullName?: string | null;
    isTemplate?: boolean;
    description?: string | null;
    homepage?: string | null;
    language?: string | null;
    private?: boolean;
    fork?: boolean;
    forksCount?: number;
    stargazersCount?: number;
    watchersCount?: number;
    defaultBranch?: string | null;
    openIssuesCount?: number;
    pushedAt?: string | null;
    createdAt?: string;
    updatedAt?: string;
    permissions?: RepositoryPermissions;
    parent?: Repository;
    source?: Repository;
    license?: unknown;
    hasDiscussions?: boolean;
    hasIssues?: boolean;
    hasWiki?: boolean;
    hasDownloads?: boolean;
    allowRebaseMerge?: boolean | null;
    allowSquashMerge?: boolean | null;
    allowMergeCommit?: boolean | null;
    hasPages?: boolean;
    subscribersCount?: number;
    size?: number;
    archived?: boolean;
    topics?: Array<string> | null;
    deleteBranchOnMerge?: boolean | null;
    visibility?: NullableOfRepositoryVisibility;
    allowAutoMerge?: boolean | null;
    allowUpdateBranch?: boolean | null;
    webCommitSignoffRequired?: boolean | null;
    securityAndAnalysis?: unknown;
};

export type RepositoryModel = {
    fullName: string;
    workflows?: Array<WorkflowBase>;
    name: string;
    owner: string;
    nodeId: string;
    htmlUrl: string;
};

export type RepositoryModel2 = {
    overallStatus?: RagStatus;
    workflows?: Array<WorkflowModel>;
    name: string;
    owner: string;
    nodeId: string;
    htmlUrl: string;
};

export type RepositoryPermissions = {
    admin?: boolean;
    maintain?: boolean;
    push?: boolean;
    triage?: boolean;
    pull?: boolean;
} | null;

export type RepositoryWorkflowRequest = {
    owner: string;
    name: string;
    workflows?: Array<number>;
};

export type SecretScanning = {
    status?: string | null;
} | null;

export type SecretScanningPushProtection = {
    status?: string | null;
} | null;

export type SecretScanningValidityChecks = {
    status?: string | null;
} | null;

export type SecurityAndAnalysis = {
    advancedSecurity?: AdvancedSecurity;
    dependabotSecurityUpdates?: DependabotSecurityUpdates;
    secretScanning?: SecretScanning;
    secretScanningPushProtection?: SecretScanningPushProtection;
    secretScanningValidityChecks?: SecretScanningValidityChecks;
} | null;

export type StringEnumOfWorkflowRunStatus = string;

export type User = {
    permissions?: RepositoryPermissions;
    siteAdmin?: boolean;
    suspendedAt?: string | null;
    suspended?: boolean;
    ldapDistinguishedName?: string | null;
    updatedAt?: string;
    avatarUrl?: string | null;
    bio?: string | null;
    blog?: string | null;
    collaborators?: number | null;
    company?: string | null;
    createdAt?: string;
    diskUsage?: number | null;
    email?: string | null;
    followers?: number;
    following?: number;
    hireable?: boolean | null;
    htmlUrl?: string | null;
    id?: number;
    nodeId?: string | null;
    location?: string | null;
    login?: string | null;
    name?: string | null;
    type?: NullableOfAccountType;
    ownedPrivateRepos?: number;
    plan?: Plan;
    privateGists?: number | null;
    publicGists?: number;
    publicRepos?: number;
    totalPrivateRepos?: number;
    url?: string | null;
} | null;

export type WorkflowBase = {
    id?: number;
    nodeId: string;
    name: string;
    htmlUrl: string;
};

export type WorkflowModel = {
    runs?: Array<WorkflowRunModel>;
    runStatus?: RagStatus;
    overallStatus?: RagStatus;
    id?: number;
    nodeId: string;
    name: string;
    htmlUrl: string;
};

export type WorkflowRunModel = {
    id: number;
    workflowId: number;
    nodeId: string;
    conclusion: NullableOfStringEnumOfWorkflowRunConclusion;
    headBranch: string;
    event: string;
    runNumber: number;
    triggeringActor?: string | null;
    status: StringEnumOfWorkflowRunStatus;
    createdAt: string;
    updatedAt: string;
    htmlUrl: string;
    ragStatus?: RagStatus;
};

export type WorkflowRunsRequest = {
    branchFilters?: Array<string>;
};

export type WorkflowsRequest = {
    repositories?: Array<RepositoryWorkflowRequest>;
};

export type GetAdminSessionDebugData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/admin/session/debug';
};

export type GetAdminSessionDebugResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetRepositoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/repositories';
};

export type GetRepositoriesResponses = {
    /**
     * OK
     */
    200: Array<Repository>;
};

export type GetRepositoriesResponse = GetRepositoriesResponses[keyof GetRepositoriesResponses];

export type GetRepositoriesGroupedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/repositories/grouped';
};

export type GetRepositoriesGroupedResponses = {
    /**
     * OK
     */
    200: Array<AccountModel>;
};

export type GetRepositoriesGroupedResponse = GetRepositoriesGroupedResponses[keyof GetRepositoriesGroupedResponses];

export type PostWorkflowsData = {
    body: WorkflowsRequest;
    path?: never;
    query?: never;
    url: '/workflows';
};

export type PostWorkflowsResponses = {
    /**
     * OK
     */
    200: Array<RepositoryModel2>;
};

export type PostWorkflowsResponse = PostWorkflowsResponses[keyof PostWorkflowsResponses];

export type GetWorkflowsForARepositoryData = {
    body: BranchFilterRequest;
    path: {
        owner: string;
        repo: string;
    };
    query?: never;
    url: '/repositories/{owner}/{repo}/workflows';
};

export type GetWorkflowsForARepositoryResponses = {
    /**
     * OK
     */
    200: Array<WorkflowModel>;
};

export type GetWorkflowsForARepositoryResponse = GetWorkflowsForARepositoryResponses[keyof GetWorkflowsForARepositoryResponses];

export type PostRepositoriesByOwnerByRepoWorkflowsByWorkflowIdRunsData = {
    body: WorkflowRunsRequest;
    path: {
        owner: string;
        repo: string;
        workflowId: number;
    };
    query?: never;
    url: '/repositories/{owner}/{repo}/workflows/{workflowId}/runs';
};

export type PostRepositoriesByOwnerByRepoWorkflowsByWorkflowIdRunsResponses = {
    /**
     * OK
     */
    200: Array<WorkflowRunModel>;
};

export type PostRepositoriesByOwnerByRepoWorkflowsByWorkflowIdRunsResponse = PostRepositoriesByOwnerByRepoWorkflowsByWorkflowIdRunsResponses[keyof PostRepositoriesByOwnerByRepoWorkflowsByWorkflowIdRunsResponses];

export type ClientOptions = {
    baseURL: 'http://localhost:5010/' | (string & {});
};